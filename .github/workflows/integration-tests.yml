---
name: Integration Tests
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-22.04', 'windows-latest']
        tool-name: ['django', 'django_channels', 'flask', 'fastapi', 'simple', 'simple_async', 'socketio']
        python-version: ['3.10', '3.11', '3.12', '3.13']
    runs-on: ${{ matrix.os }}
    env:
      GOEXPERIMENT: cgocheck2
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: false

      - name: Install Xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      # ------------------ Linux Setup ------------------
      - name: Set up Python on Linux
        if: runner.os == 'Linux'
        working-directory: tests/${{ matrix.tool-name }}/
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -yyqq
          sudo apt-get install -yyqq software-properties-common valgrind
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get install -yyqq python${{ matrix.python-version }}-dev python${{ matrix.python-version }}-venv
          sudo mv /usr/lib/x86_64-linux-gnu/pkgconfig/python-${{ matrix.python-version }}-embed.pc /usr/lib/x86_64-linux-gnu/pkgconfig/python3-embed.pc
          python${{ matrix.python-version }} -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      # ------------------ Windows Setup ------------------
      - name: Set up Python on Windows
        if: runner.os == 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies (Windows)
        if: runner.os == 'Windows'
        working-directory: tests/${{ matrix.tool-name }}/
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: pwsh

      # ------------------ Build ------------------
      - name: Build the server
        working-directory: tests/${{ matrix.tool-name }}/
        run: |
          xcaddy build --with github.com/mliezun/caddy-snake=../..
        shell: ${{ runner.os == 'Windows' && 'pwsh' || 'bash' }}

      # ------------------ Run Tests ------------------
      - name: Run integration tests (Linux)
        if: runner.os == 'Linux'
        working-directory: tests/${{ matrix.tool-name }}/
        run: |
          ./caddy run --config Caddyfile > caddy.log 2>&1 &
          timeout 60 bash -c 'while ! grep -q "finished cleaning storage units" caddy.log; do sleep 1; done'
          source venv/bin/activate
          python main_test.py

      - name: Run integration tests (Windows)
        if: runner.os == 'Windows'
        working-directory: tests/${{ matrix.tool-name }}/
        run: |
          Start-Process -FilePath ".\caddy.exe" -ArgumentList "run", "--config", "Caddyfile" -RedirectStandardOutput "caddy.log" -RedirectStandardError "caddy.log"
          $timeout = 60
          while ($timeout -gt 0 -and -not (Select-String "finished cleaning storage units" -Path "caddy.log")) {
            Start-Sleep -Seconds 1
            $timeout -= 1
          }
          .\venv\Scripts\activate
          python main_test.py
        shell: pwsh
